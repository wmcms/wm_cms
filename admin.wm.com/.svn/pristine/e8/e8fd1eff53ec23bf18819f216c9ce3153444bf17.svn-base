<template>
  <div class="app-container">
    <div class="filter-container">
      <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
          <el-button class="filter-item filter-btnNew" type="primary" icon="el-icon-edit" @click="createUser">New </el-button>
        </el-form-item>
        <el-form-item>
          <el-button class="filter-item filter-btnNew" type="default" icon="el-icon-delete" @click="batchDelete">删除所选 </el-button>
        </el-form-item>
        <el-form-item>
          <el-input v-model="queryArgs.keyword" style="width: 300px;" class="filter-item" placeholder="用户名/姓名/昵称/手机号" @keyup.enter.native="search" />
        </el-form-item>
        <el-form-item>
          <el-select v-model="queryArgs.type" class="filter-item query-type" placeholder="用户类型" clearable>
            <el-option v-for="item in userTypes" :key="item.key" :label="item.text+'('+item.key+')'" :value="item.key" />
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button v-waves class="filter-item" type="primary" icon="el-icon-search" @click="search">查询 </el-button>
        </el-form-item>

      </el-form>
    </div>
    <el-table v-loading="IsLoading" :stripe="true" :data="List" border style="width: 100%" @ @selection-change="selectChange">
      <el-table-column fixed type="selection" align="center" width="50" />
      <el-table-column fixed label="姓名" align="left">
        <template slot-scope="scope">
          <span>{{ scope.row.name }}</span>
          <i v-if="scope.row.type==1" class="el-icon-star-on" />
        </template>
      </el-table-column>
      <el-table-column prop="nickname" label="昵称" width="120" />
      <el-table-column prop="mobile" label="手机号码" width="120" />
      <el-table-column prop="email" label="邮箱" width="120" />
      <el-table-column label="等级" width="100">
        <template slot-scope="scope">
          <svg-icon v-for="n in +scope.row.level" :key="n" icon-class="star" class="meta-item__icon" />
        </template>
      </el-table-column>
      <el-table-column label="状态" width="120">
        <template slot-scope="scope">
          <span>{{ scope.row.status | statusFilter }}</span>
        </template>
      </el-table-column>
      <el-table-column fixed="right" label="操作" width="120">
        <template slot-scope="scope">
          <el-dropdown split-button type="primary" @click="editUser(scope.row)" @command="operation(scope.row.id)">
            编辑
            <el-dropdown-menu slot="dropdown">
              <el-dropdown-item data-cmd="del">删除</el-dropdown-item>
              <el-dropdown-item v-if="scope.row.status==0" divided data-cmd="disable">禁用</el-dropdown-item>
              <el-dropdown-item v-if="scope.row.status==1" divided data-cmd="enable">启用</el-dropdown-item>
            </el-dropdown-menu>
          </el-dropdown>
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="PageCount>0" :total="PageCount" :page-index.sync="queryArgs.pageIndex" :page-size.sync="queryArgs.pageSize" @pagination="pageLoad" />

    <el-dialog v-el-drag-dialog :title="IsNew?'New':'Edit'" :visible.sync="IsDialog">
      <el-form ref="dataForm" :rules="rules" class="user-form" :model="Item" label-position="right" label-width="70px">
        <el-row>
          <el-col :span="12">
            <el-form-item label="手机" prop="mobile">
              <el-input v-model.trim="Item.mobile" placeholder="请输入手机号码" maxlength="11" />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="昵称" prop="nickname">
              <el-input v-model.trim="Item.nickname" placeholder="请输入昵称" maxlength="50" />
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="类型" prop="type">
              <el-select v-model="Item.type" class="filter-item" placeholder="Please select">
                <el-option v-for="it in userTypes" :key="it.key" :label="it.text" :value="it.key" />
              </el-select>
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="姓名">
              <el-input v-model.trim="Item.name" placeholder="姓名" />
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="Email">
              <el-input v-model.trim="Item.email" placeholder="Email" />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="生日">
              <el-date-picker v-model="Item.birthDate" type="date" placeholder="Please pick a date" />
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item label="等级">
              <el-rate v-model="Item.level" :colors="['#99A9BF', '#F7BA2A', '#FF9900', '#F6416C', '#FF0000']" :max="5" style="margin-top:8px;" />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="性别">
              <el-radio-group v-model="Item.gender">
                <el-radio label="男" value="M" />
                <el-radio label="女" value="F" />
              </el-radio-group>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="12">
            <el-form-item v-if="IsNew" label="密码" prop="strPassword">
              <el-input v-model.trim="Item.strPassword" type="password" />
            </el-form-item>
            <el-form-item v-if="!IsNew" label="密码">
              <el-input v-model="Item.strPassword" type="password" />
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="IsDialog = false">
          取消
        </el-button>
        <el-button type="primary" @click="saveData()">
          保存
        </el-button>
      </div>
    </el-dialog>

  </div>
</template>

<script>
import waves from '@/directive/waves' // waves directive
import { parseTime } from '@/utils'
import Pagination from '@/components/Pagination' // secondary package based on el-pagination
import elDragDialog from '@/directive/el-drag-dialog'
import { isMobile } from '@/utils/validate'
const userTypes = [{
  key: 1,
  text: '系统用户'
},
{
  key: 2,
  text: '普通会员'
}
]
const userTypeKeyValue = userTypes.reduce((acc, cur) => {
  acc[cur.key] = cur.text
  return acc
}, {})

export default {
  components: {
    Pagination
  },
  directives: {
    waves,
    elDragDialog
  },
  filters: {
    statusFilter(status) {
      return status == 0 ? '有效' : '禁用'
    },
    typeFilter(type) {
      return userTypeKeyValue[type]
    }
  },
  data() {
    return {
      List: null, // 数据源列表
      PageCount: 0, // 总页数
      IsLoading: true, // 加载图标
      queryArgs: {
        pageIndex: 1,
        pageSize: 20,
        keyword: undefined,
        type: undefined
      },
      selectedIds: [],
      userTypes,
      Item: undefined,
      IsDialog: false,
      IsNew: true,
      rules: {
        type: [{
          required: true,
          message: '请选择用户类型',
          trigger: 'change'
        }],
        mobile: [{
          validator: function(rule, value, callback) {
            if (value) {
              if (isMobile(value)) {
                callback()
              } else {
                callback(new Error())
              }
            } else {
              callback()
            }
          },
          required: true,
          message: '请输入正确的手机号码',
          trigger: 'blur'
        }],
        strPassword: [{
          required: true,
          message: '请设置密码',
          trigger: 'blur'
        }],
        nickname: [{
          required: true,
          message: '昵称不能为空',
          trigger: 'blur'
        }]
      }
    }
  },
  created() {
    this.newUser()
    this.pageLoad()
  },
  methods: {
    selectChange(val) {
      this.selectedIds = val
    },
    pageLoad() { // 分页加载
      this.IsLoading = true
      this.httpPost('search/user', this.queryArgs).then(res => {
        const vm = this
        vm.List = res.data.items
        vm.PageCount = res.data.total
        vm.IsLoading = false
      })
    },
    search() { // 搜索
      this.queryArgs.pageIndex = 1
      this.pageLoad()
    },
    operation(id) {
      var $data = event.target.dataset
      if ($data.cmd == 'del') { this.removeUser([id]) } else if ($data.cmd == 'disable') {
        this.confirm('确定是否要提交?', () => {
          var postData = {
            id: id,
            status: 1
          }
          this.httpPost('user/updatestatus', postData).then(() => {
            this.success('操作成功!')
            this.search()
          })
        })
      } else if ($data.cmd == 'enable') {
        this.confirm('确定是否要提交?', () => {
          var postData = {
            id: id,
            status: 0
          }
          this.httpPost('user/updatestatus', postData).then(() => {
            this.success('操作成功!')
            this.search()
          })
        })
      }
    },
    batchDelete() {
      if (this.selectedIds.length > 0) {
        const filterVal = ['id']
        const list = this.selectedIds
        const data = this.formatJson(filterVal, list)
        this.removeUser(data.join().split(','))
      } else {
        this.warning('请先至少选择一条数据')
      }
    },
    removeUser(idList) {
      this.confirm('确定是否要提交?', () => {
        this.httpPost('remove/user', idList).then(res => {
          this.success('操作成功!')
          this.search()
        })
      })
    },
    newUser() {
      this.Item = {
        id: undefined,
        name: undefined,
        nickname: undefined,
        mobile: undefined,
        type: undefined,
        email: undefined,
        level: undefined,
        updateTime: undefined,
        createTime: undefined,
        birthdate: undefined,
        gender: undefined,
        strPassword: undefined,
        password: undefined
      }
    },
    createUser() {
      this.newUser()
      this.IsNew = true
      this.IsDialog = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    editUser(row) {
      this.Item = Object.assign({}, row) // copy obj
      this.Item.birthDate = new Date(this.Item.birthDate)
      this.IsNew = false
      this.IsDialog = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    saveData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          const user = Object.assign({}, this.Item)
          user.createTime = undefined
          user.updateTime = undefined
          user.password = user.strPassword
          this.httpPost('save/user', user).then(() => {
            this.IsDialog = false
            this.success('操作成功!')
            this.search()
          })
        }
      })
    },
    formatJson(filterVal, jsonData) {
      return jsonData.map(v => filterVal.map(j => {
        if (j === 'timestamp') {
          return parseTime(v[j])
        } else {
          return v[j]
        }
      }))
    }
  }
}
</script>
